//LONGEST COOMON SUBSEQUENCE


public class Longest_common_subsequence_one {
	
	//longest common subsequence memoization to reduce complexity
  static int dp[][]=new int[7][7];
	static int solution(String x,String y, int n,int m)
	{
		
		
		if(n==0 || m==0)
			return 0;
		
		if(dp[n][m]!=-1)
			return dp[n][m];
		
		else if (x.charAt(n-1)==y.charAt(m-1))
		    return dp[n][m]= 1+solution(x,y,n-1,m-1);
		
		
		else
			return dp[n][m]= Math.max(solution(x,y,n,m-1), solution(x,y,n-1,m));
		
		
		
		
	}

	public static void main(String[] args) {
	    int result,i,j;
	       long start=System.nanoTime();
			
			String x="abcdef";
			String y="efghij";
			for(i=0;i<7;i++)
			{
				for(j=0;j<7;j++)
				{
					dp[i][j]=-1;
				}
			}
			result=solution(x,y,x.length(),y.length());
			
			System.out.println(result);
			
			long end=System.nanoTime();
			System.out.println("running time="+(end-start));
			
			
			

	}

}
